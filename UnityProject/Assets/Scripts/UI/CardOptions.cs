using UnityEngine;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine.Networking;

public class CardOptions : MonoBehaviour
{
    public string cardPrefabPath = "Prefabs/CardPrefab"; // Path to the card prefab in Resources
    public Transform cardContainer; // The container to hold the cards
    public string jsonFilePath = "Assets/Resources/cardData.json"; // Path to the JSON file generated by the Python script
    
    // Reference to the PythonExecutor script to run Python script
    public PythonExecutor pythonExecutor;

    // This method will be called to spawn cards based on the input values
    public void FillAndSpawnCards(string foodName1, int numOfItems1, int calories1)
    {
        // Call the Python script once
        pythonExecutor.RunPythonScript(foodName1, numOfItems1, calories1, jsonFilePath);
        
        // Start the coroutine to wait for the JSON file without blocking
        StartCoroutine(WaitForFileToExist(jsonFilePath));
    }

    // Coroutine that waits until the file exists (non-blocking approach)
    private IEnumerator WaitForFileToExist(string path)
    {
        int maxAttempts = 30; // Maximum attempts before giving up
        int attemptCount = 0;

        while (!File.Exists(path) && attemptCount < maxAttempts)
        {
            UnityEngine.Debug.Log("Waiting for the JSON file to be created...");
            yield return new WaitForSeconds(0.5f);  // Wait for 500 milliseconds before checking again
            attemptCount++;
        }

        if (attemptCount >= maxAttempts)
        {
            UnityEngine.Debug.LogError("Timeout: JSON file not found after multiple attempts.");
        }
        else
        {
            UnityEngine.Debug.Log("JSON file found!");
            // Now that the file exists, we can read and spawn cards
            string jsonData = File.ReadAllText(path);
            List<Card> cardsToSpawn = ParseJsonData(jsonData);  // Parse all cards

            // Ensure the card container is assigned
            if (cardContainer == null)
            {
                UnityEngine.Debug.LogError("Card Container is not assigned in the Inspector!");
                yield break;
            }

            // Load the card prefab from Resources
            GameObject cardPrefab = Resources.Load<GameObject>(cardPrefabPath);

            if (cardPrefab != null)
            {
                UnityEngine.Debug.Log($"Card prefab loaded: {cardPrefab.name}");

                // Loop through the list of cards and spawn each one
                for (int i = 0; i < cardsToSpawn.Count; i++)
                {
                    // Instantiate the card prefab as a child of the card container
                    GameObject cardInstance = Instantiate(cardPrefab, cardContainer);

                    // Assign a unique name to the card
                    cardInstance.name = cardPrefab.name + "_" + i;

                    // Position the card dynamically (offset for multiple cards)
                    cardInstance.transform.localPosition = new Vector3(i * 2.5f, 0, 0); // Offset each card

                    // Get the CardDisplay component and initialize it
                    CardDisplay cardDisplay = cardInstance.GetComponent<CardDisplay>();
                    if (cardDisplay != null)
                    {
                        UnityEngine.Debug.Log("CardDisplay component found, initializing card.");
                        cardDisplay.InitializeCard(cardsToSpawn[i]);  // Initialize with the card
                    }
                    else
                    {
                        UnityEngine.Debug.LogError("CardDisplay component not found on the card prefab!");
                    }
                }
            }
            else
            {
                UnityEngine.Debug.LogError("Card prefab not found in Resources!");
            }
        }
    }

    // Parse the JSON data into a list of Card objects
    private List<Card> ParseJsonData(string jsonData)
    {
        // Deserialize the JSON data into a CardList object
        CardList cardListWrapper = JsonUtility.FromJson<CardList>("{\"cards\":"+jsonData+"}");
        if (cardListWrapper != null && cardListWrapper.cards != null)
        {
            return cardListWrapper.cards.ConvertAll(c => new Card(c.card_name, c.card_rating, c.special_technique, c.image_url));
        }
        else
        {
            UnityEngine.Debug.LogError("Error parsing JSON data into Card objects!");
            return new List<Card>(); // Return an empty list in case of failure
        }
    }
}

[System.Serializable]
public class JSONCard
{
    public string card_name;
    public int card_rating;
    public string special_technique;
    public string image_url;
}

// Class to hold the list of cards for deserialization
[System.Serializable]
public class CardList
{
    public List<JSONCard> cards;
}
